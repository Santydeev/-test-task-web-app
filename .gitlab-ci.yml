# GitLab CI/CD Pipeline для веб-приложения
stages:
  - validate
  - test
  - build
  - security
  - deploy
  - monitor

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY_URL: $CI_REGISTRY
  IMAGE_TAG: $CI_COMMIT_SHA

# Кэширование для ускорения сборки
cache:
  paths:
    - .cache/

# Валидация кода
validate:
  stage: validate
  image: golang:1.21-alpine
  before_script:
    - apk add --no-cache git
    - go mod download
  script:
    - echo "Validating Go code..."
    - go vet ./...
    - go fmt -d .
    - go mod tidy
    - go mod verify
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Тестирование
test:
  stage: test
  image: golang:1.21-alpine
  services:
    - postgres:15-alpine
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_password
    DB_HOST: postgres
    DB_PORT: 5432
    DB_USER: test_user
    DB_PASSWORD: test_password
    DB_NAME: test_db
  before_script:
    - apk add --no-cache git
    - go mod download
    - echo "Waiting for PostgreSQL to be ready..."
    - while ! nc -z postgres 5432; do sleep 1; done
  script:
    - echo "Running tests..."
    - go test -v -race -coverprofile=coverage.out ./...
    - go tool cover -html=coverage.out -o coverage.html
  coverage: '/coverage: \d+\.\d+% of statements/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.out
    paths:
      - coverage.html
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Сборка Docker образа
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "Building Docker image..."
    - docker build -t $REGISTRY_URL/$CI_PROJECT_PATH:$IMAGE_TAG .
    - docker build -t $REGISTRY_URL/$CI_PROJECT_PATH:latest .
    - docker push $REGISTRY_URL/$CI_PROJECT_PATH:$IMAGE_TAG
    - docker push $REGISTRY_URL/$CI_PROJECT_PATH:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Сканирование безопасности
security:
  stage: security
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl
    - curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - echo "Scanning for vulnerabilities..."
    - trivy image --exit-code 1 --severity HIGH,CRITICAL $REGISTRY_URL/$CI_PROJECT_PATH:$IMAGE_TAG
    - echo "Scanning dependencies..."
    - trivy fs --exit-code 1 --severity HIGH,CRITICAL .
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Развертывание в staging
deploy:staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$STAGING_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - echo "Deploying to staging..."
    - ssh -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST "cd /opt/webapp && docker-compose pull && docker-compose up -d"
  environment:
    name: staging
    url: http://staging.example.com
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual

# Развертывание в production
deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$PRODUCTION_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - echo "Deploying to production..."
    - ssh -o StrictHostKeyChecking=no $PRODUCTION_USER@$PRODUCTION_HOST "cd /opt/webapp && docker-compose pull && docker-compose up -d"
  environment:
    name: production
    url: http://production.example.com
  rules:
    - if: $CI_COMMIT_TAG
  when: manual

# Мониторинг развертывания
monitor:
  stage: monitor
  image: curlimages/curl:latest
  script:
    - echo "Checking application health..."
    - sleep 30
    - curl -f http://$DEPLOY_URL/health || exit 1
    - echo "Checking metrics endpoint..."
    - curl -f http://$DEPLOY_URL/metrics || exit 1
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - deploy:staging
    - deploy:production
